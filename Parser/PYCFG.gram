# STARTING RULES
# ==============

file: statements_opt TK_EOF
statements_opt: statements | epsilon

# GENERAL STATEMENTS
# ==================

statements: statement statement_star
statement_star: statement statement_star | epsilon

statement: compound_stmt | simple_stmts

simple_stmts: simple_stmt_list optional_semicolon
simple_stmt_list: simple_stmt simple_stmt_list_tail_star
simple_stmt_list_tail_star: TK_SEMICOLON simple_stmt simple_stmt_list_tail_star | epsilon
optional_semicolon: TK_SEMICOLON | epsilon

simple_stmt:
    | assignment
    | star_expressions
    | return_stmt
    | import_stmt
    | raise_stmt
    | TK_PASS
    | TK_BREAK
    | TK_CONTINUE
    | global_stmt
    | nonlocal_stmt

compound_stmt:
    | function_def
    | if_stmt
    | class_def
    | for_stmt
    | try_stmt
    | while_stmt

# SIMPLE STATEMENTS
# =================

assignment:
    | star_targets_eq_plus star_expressions
    | single_target augassign star_expressions

star_targets_eq_plus: star_targets TK_ASSIGN star_targets_eq_plus_rest
star_targets_eq_plus_rest: star_targets TK_ASSIGN star_targets_eq_plus_rest | epsilon

augassign:
    | TK_PLUS_ASSIGN | TK_MINUS_ASSIGN | TK_MULTIPLY_ASSIGN | TK_IMATMUL /* @= */ | TK_DIVIDE_ASSIGN
    | TK_MOD_ASSIGN | TK_BIT_AND_ASSIGN | TK_BIT_OR_ASSIGN | TK_BIT_XOR_ASSIGN
    | TK_BIT_LEFT_SHIFT_ASSIGN | TK_BIT_RIGHT_SHIFT_ASSIGN | TK_POWER_ASSIGN | TK_FLOORDIV_ASSIGN

return_stmt: TK_RETURN star_expressions_opt
star_expressions_opt: star_expressions | epsilon

raise_stmt:
    | TK_RAISE expression raise_from_opt
    | TK_RAISE
raise_from_opt: TK_FROM expression | epsilon

global_stmt: TK_GLOBAL name_comma_list
nonlocal_stmt: TK_NONLOCAL name_comma_list

name_comma_list: TK_IDENTIFIER name_comma_list_tail_star
name_comma_list_tail_star: TK_COMMA TK_IDENTIFIER name_comma_list_tail_star | epsilon

import_stmt: import_name | import_from

# Import statements
# -----------------

import_name: TK_IMPORT dotted_as_names

import_from:
    | TK_FROM dot_or_ellipsis_star dotted_name TK_IMPORT import_from_targets
    | TK_FROM dot_or_ellipsis_plus TK_IMPORT import_from_targets

dot_or_ellipsis_star: dot_or_ellipsis dot_or_ellipsis_star | epsilon
dot_or_ellipsis_plus: dot_or_ellipsis dot_or_ellipsis_star
dot_or_ellipsis: TK_PERIOD

import_from_targets:
    | TK_LPAREN import_from_as_names optional_comma TK_RPAREN
    | import_from_as_names
    | TK_MULTIPLY

optional_comma: TK_COMMA | epsilon

import_from_as_names: import_from_as_name import_from_as_name_comma_list_star
import_from_as_name_comma_list_star: TK_COMMA import_from_as_name import_from_as_name_comma_list_star | epsilon

import_from_as_name: TK_IDENTIFIER import_from_as_name_as_opt
import_from_as_name_as_opt: TK_AS TK_IDENTIFIER | epsilon

dotted_as_names: dotted_as_name dotted_as_name_comma_list_star
dotted_as_name_comma_list_star: TK_COMMA dotted_as_name dotted_as_name_comma_list_star | epsilon

dotted_as_name: dotted_name dotted_as_name_as_opt
dotted_as_name_as_opt: TK_AS TK_IDENTIFIER | epsilon

dotted_name: dotted_name TK_PERIOD TK_IDENTIFIER | TK_IDENTIFIER

# COMPOUND STATEMENTS
# ===================

# Common elements
# ---------------

block:
    | TK_INDENT statements TK_DEDENT
    | simple_stmts

# Class definitions
# -----------------

class_def: class_def_raw

class_def_raw: TK_CLASS TK_IDENTIFIER class_arguments_opt TK_COLON block
class_arguments_opt: TK_LPAREN arguments_opt TK_RPAREN | epsilon
arguments_opt: arguments | epsilon



//////////////////////////////////////////////////////////////////////////////////////////////////


# Function definitions
# --------------------

function_def: function_def_raw

# Note: TK_ASYNC prefix for function_def_raw is assumed not to be part of this grammar
# or handled at a token level not shown. If it were explicit, it would be removed here.
function_def_raw: TK_DEF TK_IDENTIFIER TK_LPAREN params_opt TK_RPAREN TK_COLON block

params_opt: params | epsilon

# Function parameters
# -------------------

params: parameters

parameters:
    | slash_no_default param_no_default_star param_with_default_star star_etc_opt
    | slash_with_default param_with_default_star star_etc_opt
    | param_no_default_plus param_with_default_star star_etc_opt
    | param_with_default_plus star_etc_opt
    | star_etc

param_no_default_star: param_no_default param_no_default_star | epsilon
param_with_default_star: param_with_default param_with_default_star | epsilon
star_etc_opt: star_etc | epsilon

param_no_default_plus: param_no_default param_no_default_star
param_with_default_plus: param_with_default param_with_default_star


slash_no_default: param_no_default_plus TK_DIVIDE slash_ending_char
slash_with_default: param_no_default_star param_with_default_plus TK_DIVIDE slash_ending_char
slash_ending_char: TK_COMMA | epsilon

star_etc:
    | TK_MULTIPLY param_no_default param_maybe_default_star kwds_opt
    | TK_MULTIPLY TK_COMMA param_maybe_default_plus kwds_opt
    | kwds

param_maybe_default_star: param_maybe_default param_maybe_default_star | epsilon
kwds_opt: kwds | epsilon
param_maybe_default_plus: param_maybe_default param_maybe_default_star

kwds: TK_POWER param_no_default

param_no_default: param param_ending_char
param_with_default: param default param_ending_char
param_maybe_default: param default_opt param_ending_char

param_ending_char: TK_COMMA | epsilon

default_opt: default | epsilon

param: TK_IDENTIFIER
default: TK_ASSIGN expression

# If statement
# ------------

if_stmt:
    | TK_IF named_expression TK_COLON block elif_stmt
    | TK_IF named_expression TK_COLON block else_block_opt

elif_stmt:
    | TK_ELIF named_expression TK_COLON block elif_stmt
    | TK_ELIF named_expression TK_COLON block else_block_opt

else_block_opt: else_block | epsilon
else_block: TK_ELSE TK_COLON block

# While statement
# ---------------

while_stmt: TK_WHILE named_expression TK_COLON block else_block_opt

# For statement
# -------------
# Note: TK_ASYNC prefix for for_stmt is assumed not to be part of this grammar.
for_stmt: TK_FOR star_targets TK_IN star_expressions TK_COLON block else_block_opt

# Try statement
# -------------
# Note: TK_ASYNC prefix for with_stmt (if it existed) would be removed.
# try_stmt does not have an async variant in Python syntax in the same way.
try_stmt:
    | TK_TRY TK_COLON block finally_block
    | TK_TRY TK_COLON block except_block_plus else_block_opt finally_block_opt
    | TK_TRY TK_COLON block except_star_block_plus else_block_opt finally_block_opt

except_block_plus: except_block except_block_plus_star
except_block_plus_star: except_block except_block_plus_star | epsilon

except_star_block_plus: except_star_block except_star_block_plus_star
except_star_block_plus_star: except_star_block except_star_block_plus_star | epsilon

finally_block_opt: finally_block | epsilon

# Except statement
# ----------------

except_block:
    | TK_EXCEPT expression except_as_name_opt TK_COLON block
    | TK_EXCEPT TK_COLON block
except_as_name_opt: TK_AS TK_IDENTIFIER | epsilon

except_star_block: TK_EXCEPT TK_MULTIPLY expression except_as_name_opt TK_COLON block
finally_block: TK_FINALLY TK_COLON block

# EXPRESSIONS
# -----------

expressions:
    | expression expression_comma_plus optional_comma
    | expression TK_COMMA
    | expression
expression_comma_plus: TK_COMMA expression expression_comma_plus_star
expression_comma_plus_star: TK_COMMA expression expression_comma_plus_star | epsilon


expression:
    | disjunction TK_IF disjunction TK_ELSE expression
    | disjunction

star_expressions:
    | star_expression star_expression_comma_plus optional_comma
    | star_expression TK_COMMA
    | star_expression
star_expression_comma_plus: TK_COMMA star_expression star_expression_comma_plus_star
star_expression_comma_plus_star: TK_COMMA star_expression star_expression_comma_plus_star | epsilon

star_expression: TK_MULTIPLY bitwise_or | expression

star_named_expressions: star_named_expression_comma_list optional_comma
star_named_expression_comma_list: star_named_expression star_named_expression_comma_list_tail_star
star_named_expression_comma_list_tail_star: TK_COMMA star_named_expression star_named_expression_comma_list_tail_star | epsilon

star_named_expression: TK_MULTIPLY bitwise_or | named_expression

named_expression: expression

disjunction: conjunction disjunction_tail_star
disjunction_tail_star: TK_OR conjunction disjunction_tail_star | epsilon

conjunction: inversion conjunction_tail_star
conjunction_tail_star: TK_AND inversion conjunction_tail_star | epsilon

inversion: TK_NOT inversion | comparison

comparison: bitwise_or compare_op_bitwise_or_pair_star
compare_op_bitwise_or_pair_star: compare_op_bitwise_or_pair compare_op_bitwise_or_pair_star | epsilon

compare_op_bitwise_or_pair:
    | eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or
    | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or
    | isnot_bitwise_or | is_bitwise_or

eq_bitwise_or: TK_EQUAL bitwise_or
noteq_bitwise_or: TK_NOT_EQUAL bitwise_or
lte_bitwise_or: TK_LESS_EQUAL bitwise_or
lt_bitwise_or: TK_LESS bitwise_or
gte_bitwise_or: TK_GREATER_EQUAL bitwise_or
gt_bitwise_or: TK_GREATER bitwise_or
notin_bitwise_or: TK_NOT TK_IN bitwise_or
in_bitwise_or: TK_IN bitwise_or
isnot_bitwise_or: TK_IS TK_NOT bitwise_or
is_bitwise_or: TK_IS bitwise_or

bitwise_or: bitwise_or TK_BIT_OR bitwise_xor | bitwise_xor
bitwise_xor: bitwise_xor TK_BIT_XOR bitwise_and | bitwise_and
bitwise_and: bitwise_and TK_BIT_AND shift_expr | shift_expr
shift_expr: shift_expr TK_BIT_LEFT_SHIFT sum | shift_expr TK_BIT_RIGHT_SHIFT sum | sum

sum: sum TK_PLUS term | sum TK_MINUS term | term
term: term TK_MULTIPLY factor | term TK_DIVIDE factor | term TK_FLOORDIV factor | term TK_MOD factor | term TK_MATMUL factor | factor
factor: TK_PLUS factor | TK_MINUS factor | TK_BIT_NOT factor | power

power: primary TK_POWER factor | primary

primary:
    | primary TK_PERIOD TK_IDENTIFIER
    | primary TK_LPAREN arguments_opt TK_RPAREN
    | primary TK_LBRACKET slices TK_RBRACKET
    | atom

slices:
    | slice
    | slice_or_starred_expr_comma_list optional_comma

slice_or_starred_expr_comma_list: slice_or_starred_expr slice_or_starred_expr_comma_list_tail_star
slice_or_starred_expr_comma_list_tail_star: TK_COMMA slice_or_starred_expr slice_or_starred_expr_comma_list_tail_star | epsilon
slice_or_starred_expr: slice | starred_expression

slice: expression_opt TK_COLON expression_opt slice_colon_expr_opt | named_expression
expression_opt: expression | epsilon
slice_colon_expr_opt: TK_COLON expression_opt | epsilon

atom:
    | TK_IDENTIFIER
    | TK_TRUE | TK_FALSE | TK_NONE
    | strings
    | TK_NUMBER
    | TK_STR | TK_INT | TK_FLOAT | TK_COMPLEX | TK_LIST | TK_TUPLE | TK_RANGE
    | TK_DICT | TK_SET | TK_FROZENSET | TK_BOOL | TK_BYTES
    | TK_BYTEARRAY | TK_MEMORYVIEW | TK_NONETYPE
    | tuple_group_genexp_variant
    | list_listcomp_variant
    | dict_set_comp_variant

tuple_group_genexp_variant: tuple | group
list_listcomp_variant: list | listcomp
dict_set_comp_variant: dict | set | dictcomp | setcomp

group: TK_LPAREN named_expression TK_RPAREN

# LITERALS
# ========

string: TK_STRING

strings: fstring_or_string_plus
fstring_or_string_plus: fstring_or_string fstring_or_string_plus_star
fstring_or_string_plus_star: fstring_or_string fstring_or_string_plus_star | epsilon
fstring_or_string: string | TK_BYTES

list: TK_LBRACKET star_named_expressions_opt_for_collections TK_RBRACKET
star_named_expressions_opt_for_collections: star_named_expressions | epsilon


tuple: TK_LPAREN tuple_content_opt TK_RPAREN
tuple_content_opt: star_named_expression TK_COMMA star_named_expressions_opt_for_collections | epsilon

set: TK_LBRACE star_named_expressions TK_RBRACE

dict: TK_LBRACE double_starred_kvpairs_opt TK_RBRACE
double_starred_kvpairs_opt: double_starred_kvpairs | epsilon

double_starred_kvpairs: double_starred_kvpair_comma_list optional_comma
double_starred_kvpair_comma_list: double_starred_kvpair double_starred_kvpair_comma_list_tail_star
double_starred_kvpair_comma_list_tail_star: TK_COMMA double_starred_kvpair double_starred_kvpair_comma_list_tail_star | epsilon

double_starred_kvpair: TK_POWER bitwise_or | kvpair
kvpair: expression TK_COLON expression

# Comprehensions & Generators
# ---------------------------

for_if_clauses: for_if_clause_plus
for_if_clause_plus: for_if_clause for_if_clause_plus_star
for_if_clause_plus_star: for_if_clause for_if_clause_plus_star | epsilon

# Note: TK_ASYNC prefix for for_if_clause is assumed not to be part of this grammar.
for_if_clause: TK_FOR star_targets TK_IN disjunction for_if_clause_if_disjunction_star
for_if_clause_if_disjunction_star: TK_IF disjunction for_if_clause_if_disjunction_star | epsilon

listcomp: TK_LBRACKET named_expression for_if_clauses TK_RBRACKET
setcomp: TK_LBRACE named_expression for_if_clauses TK_RBRACE
dictcomp: TK_LBRACE kvpair for_if_clauses TK_RBRACE

# FUNCTION CALL ARGUMENTS
# =======================

arguments: args optional_comma

args:
    | args_main_sequence_comma_kwargs_opt
    | kwargs

args_main_sequence_comma_kwargs_opt: args_main_sequence args_comma_kwargs_opt
args_comma_kwargs_opt: TK_COMMA kwargs | epsilon

args_main_sequence: arg_item args_main_sequence_tail_star
args_main_sequence_tail_star: TK_COMMA arg_item args_main_sequence_tail_star | epsilon
arg_item: starred_expression | named_expression # named_expression is now just expression

kwargs:
    | kwarg_or_starred_comma_list TK_COMMA kwarg_or_double_starred_comma_list
    | kwarg_or_starred_comma_list
    | kwarg_or_double_starred_comma_list

kwarg_or_starred_comma_list: kwarg_or_starred kwarg_or_starred_comma_list_tail_star
kwarg_or_starred_comma_list_tail_star: TK_COMMA kwarg_or_starred kwarg_or_starred_comma_list_tail_star | epsilon

kwarg_or_double_starred_comma_list: kwarg_or_double_starred kwarg_or_double_starred_comma_list_tail_star
kwarg_or_double_starred_comma_list_tail_star: TK_COMMA kwarg_or_double_starred kwarg_or_double_starred_comma_list_tail_star | epsilon

kwarg_or_starred: TK_IDENTIFIER TK_ASSIGN expression | starred_expression
kwarg_or_double_starred: TK_IDENTIFIER TK_ASSIGN expression | TK_POWER expression

# ASSIGNMENT TARGETS
# ==================

star_targets:
    | star_target
    | star_target star_target_comma_list_star optional_comma
star_target_comma_list_star: TK_COMMA star_target star_target_comma_list_star | epsilon

star_targets_list_seq: star_target_comma_list optional_comma
star_target_comma_list: star_target star_target_comma_list_tail_star
star_target_comma_list_tail_star: TK_COMMA star_target star_target_comma_list_tail_star | epsilon

star_targets_tuple_seq:
    | star_target star_target_comma_list_plus optional_comma
    | star_target TK_COMMA
star_target_comma_list_plus: TK_COMMA star_target star_target_comma_list_star


star_target: TK_MULTIPLY unstarred_star_target | target_with_star_atom
unstarred_star_target: star_target
target_with_star_atom:
    | t_primary TK_PERIOD TK_IDENTIFIER
    | t_primary TK_LBRACKET slices TK_RBRACKET
    | star_atom

star_atom:
    | TK_IDENTIFIER
    | TK_LPAREN target_with_star_atom TK_RPAREN
    | TK_LPAREN star_targets_tuple_seq_opt TK_RPAREN
    | TK_LBRACKET star_targets_list_seq_opt TK_RBRACKET
star_targets_tuple_seq_opt: star_targets_tuple_seq | epsilon
star_targets_list_seq_opt: star_targets_list_seq | epsilon

single_target:
    | single_subscript_attribute_target
    | TK_IDENTIFIER
    | TK_LPAREN single_target TK_RPAREN

single_subscript_attribute_target:
    | t_primary TK_PERIOD TK_IDENTIFIER
    | t_primary TK_LBRACKET slices TK_RBRACKET

t_primary:
    | t_primary TK_PERIOD TK_IDENTIFIER
    | t_primary TK_LBRACKET slices TK_RBRACKET
    | t_primary TK_LPAREN arguments_opt TK_RPAREN
    | atom


# ========================= END OF THE MODIFIED GRAMMAR ===========================