# STARTING RULES
# ==============

file: statements_opt TK_EOF
statements_opt: statements | epsilon

# GENERAL STATEMENTS
# ==================

statements: statement statement_star
statement_star: statement statement_star | epsilon

statement: compound_stmt | simple_stmts

simple_stmts: simple_stmt_list optional_semicolon
simple_stmt_list: simple_stmt simple_stmt_list_tail_star
simple_stmt_list_tail_star: TK_SEMICOLON simple_stmt simple_stmt_list_tail_star | epsilon
optional_semicolon: TK_SEMICOLON | epsilon

simple_stmt:
    | assignment
    | expressions  # Was star_expressions
    | return_stmt
    | import_stmt
    | raise_stmt
    | TK_PASS
    | TK_BREAK
    | TK_CONTINUE
    | global_stmt
    | nonlocal_stmt

compound_stmt:
    | function_def
    | if_stmt
    | class_def
    | for_stmt
    | try_stmt
    | while_stmt

# SIMPLE STATEMENTS
# =================

assignment:
    | targets TK_ASSIGN expressions        # Simplified from chained assignment and star_targets/star_expressions
    | single_target augassign expressions  # Was star_expressions

# star_targets_eq_plus and star_targets_eq_plus_rest are removed (handled by simplification above)

augassign:
    | TK_PLUS_ASSIGN | TK_MINUS_ASSIGN | TK_MULTIPLY_ASSIGN | TK_DIVIDE_ASSIGN # TK_IMATMUL removed
    | TK_MOD_ASSIGN | TK_BIT_AND_ASSIGN | TK_BIT_OR_ASSIGN | TK_BIT_XOR_ASSIGN
    | TK_BIT_LEFT_SHIFT_ASSIGN | TK_BIT_RIGHT_SHIFT_ASSIGN | TK_POWER_ASSIGN | TK_FLOORDIV_ASSIGN

return_stmt: TK_RETURN expressions_opt # Was star_expressions_opt
expressions_opt: expressions | epsilon # Was star_expressions_opt

raise_stmt:
    | TK_RAISE expression raise_from_opt
    | TK_RAISE
raise_from_opt: TK_FROM expression | epsilon

global_stmt: TK_GLOBAL name_comma_list
nonlocal_stmt: TK_NONLOCAL name_comma_list

name_comma_list: TK_IDENTIFIER name_comma_list_tail_star
name_comma_list_tail_star: TK_COMMA TK_IDENTIFIER name_comma_list_tail_star | epsilon

import_stmt: import_name | import_from

# Import statements
# -----------------
# (Kept as is, considered standard)
import_name: TK_IMPORT dotted_as_names

import_from:
    | TK_FROM dot_or_ellipsis_star dotted_name TK_IMPORT import_from_targets
    | TK_FROM dot_or_ellipsis_plus TK_IMPORT import_from_targets

dot_or_ellipsis_star: dot_or_ellipsis dot_or_ellipsis_star | epsilon
dot_or_ellipsis_plus: dot_or_ellipsis dot_or_ellipsis_star
dot_or_ellipsis: TK_PERIOD

import_from_targets:
    | TK_LPAREN import_from_as_names optional_comma TK_RPAREN
    | import_from_as_names
    | TK_MULTIPLY

optional_comma: TK_COMMA | epsilon

import_from_as_names: import_from_as_name import_from_as_name_comma_list_star
import_from_as_name_comma_list_star: TK_COMMA import_from_as_name import_from_as_name_comma_list_star | epsilon

import_from_as_name: TK_IDENTIFIER import_from_as_name_as_opt
import_from_as_name_as_opt: TK_AS TK_IDENTIFIER | epsilon

dotted_as_names: dotted_as_name dotted_as_name_comma_list_star
dotted_as_name_comma_list_star: TK_COMMA dotted_as_name dotted_as_name_comma_list_star | epsilon

dotted_as_name: dotted_name dotted_as_name_as_opt
dotted_as_name_as_opt: TK_AS TK_IDENTIFIER | epsilon

dotted_name: dotted_name TK_PERIOD TK_IDENTIFIER | TK_IDENTIFIER

# COMPOUND STATEMENTS
# ===================

# Common elements
# ---------------

block:
    | TK_INDENT statements TK_DEDENT
    | simple_stmts

# Class definitions
# -----------------

class_def: class_def_raw

class_def_raw: TK_CLASS TK_IDENTIFIER class_arguments_opt TK_COLON block
class_arguments_opt: TK_LPAREN arguments_opt TK_RPAREN | epsilon # arguments_opt will use simplified 'arguments'
arguments_opt: arguments | epsilon


# Function definitions
# --------------------

function_def: function_def_raw

function_def_raw: TK_DEF TK_IDENTIFIER TK_LPAREN params_opt TK_RPAREN TK_COLON block

params_opt: params | epsilon

# Function parameters (Simplified)
# -------------------

params: parameters

parameters: # Removed slash_no_default, slash_with_default (positional-only)
    | param_no_default_plus param_with_default_star simplified_star_etc_opt
    | param_with_default_plus simplified_star_etc_opt
    | simplified_star_etc

param_no_default_star: param_no_default param_no_default_star | epsilon
param_with_default_star: param_with_default param_with_default_star | epsilon
simplified_star_etc_opt: simplified_star_etc | epsilon

param_no_default_plus: param_no_default param_no_default_star
param_with_default_plus: param_with_default param_with_default_star

simplified_star_etc: # Simplified to remove keyword-only parameters without *args name
    | TK_MULTIPLY param_no_default kwds_opt # This is *args, **kwargs or *args
    | kwds                                 # This is **kwargs

# param_maybe_default_star, param_maybe_default_plus, param_maybe_default removed (were for keyword-only)
kwds_opt: kwds | epsilon

kwds: TK_POWER param_no_default # **kwargs

param_no_default: param param_ending_char
param_with_default: param default param_ending_char

param_ending_char: TK_COMMA | epsilon

default_opt: default | epsilon # Retained for potential future use, though param_maybe_default removed

param: TK_IDENTIFIER
default: TK_ASSIGN expression

# If statement
# ------------

if_stmt: # named_expression replaced by expression
    | TK_IF expression TK_COLON block elif_stmt
    | TK_IF expression TK_COLON block else_block_opt

elif_stmt: # named_expression replaced by expression
    | TK_ELIF expression TK_COLON block elif_stmt
    | TK_ELIF expression TK_COLON block else_block_opt

else_block_opt: else_block | epsilon
else_block: TK_ELSE TK_COLON block

# While statement
# ---------------

while_stmt: TK_WHILE expression TK_COLON block else_block_opt # named_expression replaced by expression

# For statement
# -------------
for_stmt: TK_FOR targets TK_IN expressions TK_COLON block else_block_opt # star_targets -> targets, star_expressions -> expressions

# Try statement
# -------------
try_stmt: # Removed except_star_block_plus (exception groups)
    | TK_TRY TK_COLON block finally_block
    | TK_TRY TK_COLON block except_block_plus else_block_opt finally_block_opt

except_block_plus: except_block except_block_plus_star
except_block_plus_star: except_block except_block_plus_star | epsilon

# except_star_block_plus and related rules removed.

finally_block_opt: finally_block | epsilon

# Except statement
# ----------------

except_block:
    | TK_EXCEPT expression except_as_name_opt TK_COLON block
    | TK_EXCEPT TK_COLON block
except_as_name_opt: TK_AS TK_IDENTIFIER | epsilon

# except_star_block removed.
finally_block: TK_FINALLY TK_COLON block

# EXPRESSIONS
# -----------

expressions:
    | expression expression_comma_plus optional_comma
    | expression TK_COMMA
    | expression
expression_comma_plus: TK_COMMA expression expression_comma_plus_star
expression_comma_plus_star: TK_COMMA expression expression_comma_plus_star | epsilon


expression:
    | disjunction TK_IF disjunction TK_ELSE expression
    | disjunction


disjunction: conjunction disjunction_tail_star
disjunction_tail_star: TK_OR conjunction disjunction_tail_star | epsilon

conjunction: inversion conjunction_tail_star
conjunction_tail_star: TK_AND inversion conjunction_tail_star | epsilon

inversion: TK_NOT inversion | comparison

comparison: bitwise_or compare_op_bitwise_or_pair_star
compare_op_bitwise_or_pair_star: compare_op_bitwise_or_pair compare_op_bitwise_or_pair_star | epsilon

compare_op_bitwise_or_pair:
    | eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or
    | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or
    | isnot_bitwise_or | is_bitwise_or

eq_bitwise_or: TK_EQUAL bitwise_or
noteq_bitwise_or: TK_NOT_EQUAL bitwise_or
lte_bitwise_or: TK_LESS_EQUAL bitwise_or
lt_bitwise_or: TK_LESS bitwise_or
gte_bitwise_or: TK_GREATER_EQUAL bitwise_or
gt_bitwise_or: TK_GREATER bitwise_or
notin_bitwise_or: TK_NOT TK_IN bitwise_or
in_bitwise_or: TK_IN bitwise_or
isnot_bitwise_or: TK_IS TK_NOT bitwise_or
is_bitwise_or: TK_IS bitwise_or

bitwise_or: bitwise_or TK_BIT_OR bitwise_xor | bitwise_xor
bitwise_xor: bitwise_xor TK_BIT_XOR bitwise_and | bitwise_and
bitwise_and: bitwise_and TK_BIT_AND shift_expr | shift_expr
shift_expr: shift_expr TK_BIT_LEFT_SHIFT sum | shift_expr TK_BIT_RIGHT_SHIFT sum | sum

sum: sum TK_PLUS term | sum TK_MINUS term | term
term: term TK_MULTIPLY factor | term TK_DIVIDE factor | term TK_FLOORDIV factor | term TK_MOD factor | factor # TK_MATMUL factor removed
factor: TK_PLUS factor | TK_MINUS factor | TK_BIT_NOT factor | power

power: primary TK_POWER factor | primary

primary:
    | primary TK_PERIOD TK_IDENTIFIER
    | primary TK_LPAREN arguments_opt TK_RPAREN # arguments_opt uses simplified 'arguments'
    | primary TK_LBRACKET slices TK_RBRACKET
    | atom

slices:
    | slice
    | slice_or_expr_comma_list optional_comma # Was slice_or_starred_expr_comma_list

slice_or_expr_comma_list: slice_or_expr slice_or_expr_comma_list_tail_star # Was slice_or_starred_expr...
slice_or_expr_comma_list_tail_star: TK_COMMA slice_or_expr slice_or_expr_comma_list_tail_star | epsilon # Was slice_or_starred_expr...
slice_or_expr: slice | expression # Was starred_expression, now simplified to expression

slice: expression_opt TK_COLON expression_opt slice_colon_expr_opt | expression # Was named_expression
expression_opt: expression | epsilon
slice_colon_expr_opt: TK_COLON expression_opt | epsilon

atom:
    | TK_IDENTIFIER
    | TK_TRUE | TK_FALSE | TK_NONE
    | strings
    | TK_NUMBER
    | TK_STR | TK_INT | TK_FLOAT | TK_COMPLEX | TK_LIST | TK_TUPLE | TK_RANGE
    | TK_DICT | TK_SET | TK_FROZENSET | TK_BOOL | TK_BYTES
    | TK_BYTEARRAY | TK_MEMORYVIEW | TK_NONETYPE
    | tuple_group_variant # Was tuple_group_genexp_variant, genexp part implicitly removed with comprehensions
    | list_variant        # Was list_listcomp_variant
    | dict_set_variant    # Was dict_set_comp_variant

tuple_group_variant: tuple | group # genexp removed
list_variant: list               # listcomp removed
dict_set_variant: dict | set     # dictcomp and setcomp removed

group: TK_LPAREN expression TK_RPAREN # Was named_expression

# LITERALS
# ========

string: TK_STRING

strings: fstring_or_string_plus
fstring_or_string_plus: fstring_or_string fstring_or_string_plus_star
fstring_or_string_plus_star: fstring_or_string fstring_or_string_plus_star | epsilon
fstring_or_string: string | TK_BYTES # Assuming f-strings are handled as TK_STRING or a variant not detailed here

list: TK_LBRACKET expressions_opt TK_RBRACKET # Was star_named_expressions_opt_for_collections
# star_named_expressions_opt_for_collections rule removed.

tuple: TK_LPAREN tuple_content_opt TK_RPAREN
tuple_content_opt: expression TK_COMMA expressions_opt | epsilon # Was star_named_expression and star_named_expressions_opt_for_collections

set: TK_LBRACE expressions TK_RBRACE # Was star_named_expressions

dict: TK_LBRACE kvpairs_opt TK_RBRACE # Was double_starred_kvpairs_opt
kvpairs_opt: kvpairs | epsilon       # Was double_starred_kvpairs_opt

kvpairs: kvpair_comma_list optional_comma # Was double_starred_kvpairs
kvpair_comma_list: kvpair kvpair_comma_list_tail_star # Was double_starred_kvpair...
kvpair_comma_list_tail_star: TK_COMMA kvpair kvpair_comma_list_tail_star | epsilon # Was double_starred_kvpair...

# double_starred_kvpair simplified to kvpair as TK_POWER bitwise_or (for **d) is removed.
kvpair: expression TK_COLON expression

arguments: args optional_comma

args:
    | positional_arguments_list TK_COMMA keyword_arguments_list
    | positional_arguments_list
    | keyword_arguments_list
    | epsilon # To allow f()

positional_arguments_list: expression positional_arguments_list_tail_star
positional_arguments_list_tail_star: TK_COMMA expression positional_arguments_list_tail_star | epsilon

keyword_arguments_list: keyword_item keyword_arguments_list_tail_star
keyword_arguments_list_tail_star: TK_COMMA keyword_item keyword_arguments_list_tail_star | epsilon

keyword_item: TK_IDENTIFIER TK_ASSIGN expression


# ASSIGNMENT TARGETS (Simplified: no *target)
# ==================

targets: # Was star_targets
    | target
    | target target_comma_list_star optional_comma
target_comma_list_star: TK_COMMA target target_comma_list_star | epsilon # Was star_target_comma_list_star

targets_list_seq: target_comma_list optional_comma # Was star_targets_list_seq
target_comma_list: target target_comma_list_tail_star # Was star_target_comma_list
target_comma_list_tail_star: TK_COMMA target target_comma_list_tail_star | epsilon # Was star_target_comma_list_tail_star

targets_tuple_seq: # Was star_targets_tuple_seq
    | target target_comma_list_plus optional_comma
    | target TK_COMMA
target_comma_list_plus: TK_COMMA target target_comma_list_star # Was star_target_comma_list_plus


target: # Was star_target, TK_MULTIPLY unstarred_star_target option removed
    | t_primary TK_PERIOD TK_IDENTIFIER
    | t_primary TK_LBRACKET slices TK_RBRACKET
    | target_atom # Was star_atom

target_atom: # Was star_atom, simplified to remove internal packing/unpacking targets
    | TK_IDENTIFIER
    | TK_LPAREN target TK_RPAREN # Was target_with_star_atom
    | TK_LPAREN targets_tuple_seq_opt TK_RPAREN # Was star_targets_tuple_seq_opt
    | TK_LBRACKET targets_list_seq_opt TK_RBRACKET # Was star_targets_list_seq_opt
targets_tuple_seq_opt: targets_tuple_seq | epsilon # Was star_targets_tuple_seq_opt
targets_list_seq_opt: targets_list_seq | epsilon # Was star_targets_list_seq_opt

single_target:
    | single_subscript_attribute_target
    | TK_IDENTIFIER
    | TK_LPAREN single_target TK_RPAREN

single_subscript_attribute_target:
    | t_primary TK_PERIOD TK_IDENTIFIER
    | t_primary TK_LBRACKET slices TK_RBRACKET

t_primary:
    | t_primary TK_PERIOD TK_IDENTIFIER
    | t_primary TK_LBRACKET slices TK_RBRACKET
    | t_primary TK_LPAREN arguments_opt TK_RPAREN # arguments_opt uses simplified 'arguments'
    | atom

# ========================= END OF THE MODIFIED GRAMMAR ===========================